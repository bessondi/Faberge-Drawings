{"version":3,"sources":["components/preloader/preloader.jsx","App.js","serviceWorker.js","index.js"],"names":["Preloader","props","viewRef","React","createRef","this","current","style","opacity","ref","className","viewBox","cx","cy","r","fill","stroke","strokeWidth","Component","AppRouter","lazy","App","fallback","Boolean","window","location","hostname","match","hashHistory","createHashHistory","basename","process","ReactDOM","render","history","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAGqBA,G,wDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,QAAUC,IAAMC,YAFP,E,mEAMfC,KAAKH,QAAQI,QAAQC,MAAMC,QAAU,I,+BAIpC,OACI,yBAAKC,IAAKJ,KAAKH,QAASQ,UAAU,aAC9B,yBAAKA,UAAU,2BAA2BC,QAAQ,eAC9C,4BAAQD,UAAU,+BAA+BE,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,OAAOC,OAAO,OAAOC,YAAY,Y,GAd3FC,cCCjCC,EAAYC,gBAAK,kBAAM,uDAUdC,MARf,WACE,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAACH,EAAD,QCGcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAMC,EAAcC,YAAkB,CAACC,SAAUC,sBAEjDC,IAASC,OACP,kBAAC,IAAD,CAAQC,QAASN,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4806b4f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './preloaderStyle.css';\r\n\r\nexport default class Preloader extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.viewRef = React.createRef();\r\n    }\r\n\r\n     componentWillUnmount(){\r\n       this.viewRef.current.style.opacity = 0;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div ref={this.viewRef} className=\"preloader\">\r\n                <svg className=\"preloader__image_animate\" viewBox=\"25 25 50 50\" >\r\n                    <circle className=\"preloader__image__loaderPath\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke=\"#fff\" strokeWidth=\"2\" />\r\n                </svg>\r\n            </div>\r\n        );\r\n    }\r\n   \r\n}","import React, {Suspense, lazy} from 'react';\r\nimport Preloader from './components/preloader/preloader';\r\n\r\n\r\nconst AppRouter = lazy(() => import('./components/AppRouter'));\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={<Preloader/>}>\r\n      <AppRouter/>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Router} from 'react-router';\r\n// import createHashHistory from 'history/createHashHistory';\r\nimport {createHashHistory} from 'history';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nconst hashHistory = createHashHistory({basename: process.env.PUBLIC_URL});\r\n\r\nReactDOM.render(\r\n  <Router history={hashHistory}>\r\n    <App/>\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}